{"meta":{"title":"X x","subtitle":null,"description":null,"author":"xXx","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"SELECT","slug":"select","date":"2017-11-27T06:38:34.146Z","updated":"2017-11-27T06:38:34.138Z","comments":true,"path":"2017/11/27/select/","link":"","permalink":"http://yoursite.com/2017/11/27/select/","excerpt":"","text":"这篇文章主要是做一下Java的查询算法的整理, &amp;npsp&amp;npsp &amp;npsp&amp;npsp &amp;npsp&amp;npsp &amp;npsp&amp;npsp &amp;npsp&amp;npsp &amp;npsp&amp;npsp &amp;npsp&amp;npsp &amp;npsp&amp;npsp 二分法查找1234567891011121314151617int BinarySearch1(int a[], int value, int n)&#123; int low, high, mid; low = 0; high = n-1; while(low&lt;=high) &#123; mid = (low+high)/2; if(a[mid]==value) return mid; if(a[mid]&gt;value) high = mid-1; if(a[mid]&lt;value) low = mid+1; &#125; return -1;&#125; 二分法查找(递归)12345678910int BinarySearch2(int a[], int value, int low, int high)&#123; int mid = low+(high-low)/2; if(a[mid]==value) return mid; if(a[mid]&gt;value) return BinarySearch2(a, value, low, mid-1); if(a[mid]&lt;value) return BinarySearch2(a, value, mid+1, high);&#125;","categories":[{"name":"java SE","slug":"java-SE","permalink":"http://yoursite.com/categories/java-SE/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"SORT","slug":"sort","date":"2017-11-27T06:31:07.643Z","updated":"2017-11-27T06:31:07.643Z","comments":true,"path":"2017/11/27/sort/","link":"","permalink":"http://yoursite.com/2017/11/27/sort/","excerpt":"","text":"这篇文章主要是做一下Java的排序算法的整理, java java java java java 冒泡排序1234567891011121314151617181920212223242526/* * 冒泡排序 */public class BubbleSort &#123; public static void main(String[] args) &#123; int[] arr=&#123;6,3,8,2,9,1&#125;; System.out.println(\"排序前数组为：\"); for(int num:arr)&#123; System.out.print(num+\" \"); &#125; for(int i=0;i&lt;arr.length-1;i++)&#123;//外层循环控制排序趟数 for(int j=0;j&lt;arr.length-1-i;j++)&#123;//内层循环控制每一趟排序多少次 if(arr[j]&gt;arr[j+1])&#123; int temp=arr[j]; arr[j]=arr[j+1]; arr[j+1]=temp; &#125; &#125; &#125; System.out.println(); System.out.println(\"排序后的数组为：\"); for(int num:arr)&#123; System.out.print(num+\" \"); &#125; &#125; &#125; 插入式排序1234567891011121314151617181920public class InsertSort &#123; public static void insertSort(int[] a) &#123; int i, j, insertNote;// 要插入的数据 for (i = 1; i &lt; a.length; i++) &#123;// 从数组的第二个元素开始循环将数组中的元素插入 insertNote = a[i];// 设置数组中的第2个元素为第一次循环要插入的数据 j = i - 1; while (j &gt;= 0 &amp;&amp; insertNote &lt; a[j]) &#123; a[j + 1] = a[j];// 如果要插入的元素小于第j个元素,就将第j个元素向后移动 j--; &#125; a[j + 1] = insertNote;// 直到要插入的元素不小于第j个元素,将insertNote插入到数组中 &#125; &#125; public static void main(String[] args) &#123; int a[] = &#123; 38,65,97,76,13,27,49 &#125;; insertSort(a); System.out.println(Arrays.toString(a)); &#125;&#125; 选择排序12345678910111213141516171819202122232425262728public class SelectionSort &#123; public static void selectionSort(int[] a) &#123; int n = a.length; for (int i = 0; i &lt; n; i++) &#123; int k = i; // 找出最小值的小标 for (int j = i + 1; j &lt; n; j++) &#123; if (a[j] &lt; a[k]) &#123; k = j; &#125; &#125; // 将最小值放到排序序列末尾 if (k &gt; i) &#123; int tmp = a[i]; a[i] = a[k]; a[k] = tmp; &#125; &#125; &#125; public static void main(String[] args) &#123; int[] b = &#123; 49, 38, 65, 97, 76, 13, 27, 50 &#125;; selectionSort(b); for (int i : b) System.out.print(i + \" \"); &#125;&#125; 快速排序123456789101112public void listSort1()&#123; List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(1); list.add(55); list.add(9); list.add(0); list.add(2); Collections.sort(list);//使用Collections的sort方法 for(int a :list)&#123; System.out.println(a); &#125;&#125;","categories":[{"name":"java SE","slug":"java-SE","permalink":"http://yoursite.com/categories/java-SE/"}],"tags":[{"name":"java","slug":"java","permalink":"http://yoursite.com/tags/java/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-03T03:28:03.441Z","updated":"2017-11-03T03:28:03.417Z","comments":true,"path":"2017/11/03/hello-world/","link":"","permalink":"http://yoursite.com/2017/11/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://yoursite.com/categories/Hexo教程/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"nodejs","slug":"nodejs","permalink":"http://yoursite.com/tags/nodejs/"}]}]}