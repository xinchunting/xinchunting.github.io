<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X x</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-05T02:45:03.448Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xXx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-boot</title>
    <link href="http://yoursite.com/2017/12/05/spring-boot/"/>
    <id>http://yoursite.com/2017/12/05/spring-boot/</id>
    <published>2017-12-05T02:45:03.456Z</published>
    <updated>2017-12-05T02:45:03.448Z</updated>
    
    <content type="html"><![CDATA[<p>spring &amp; spring boot  注解汇总  及  说明  xXx</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication:"></a>@SpringBootApplication:</h3><p>包含@Configuration、@EnableAutoConfiguration、@ComponentScan<br>通常用在主类上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * quick start</div><div class="line"> */</div><div class="line">@SpringBootApplication</div><div class="line">public class Application extends SpringBootServletInitializer&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Repository"><a href="#Repository" class="headerlink" title="@Repository:"></a>@Repository:</h3><p>用于标注数据访问组件，即DAO组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Repository  </div><div class="line">public class VentorDaoImpl implements iVentorDao &#123;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="@Service:"></a>@Service:</h3><p>用于标注业务层组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public class SystemUserService &#123;&#125;</div></pre></td></tr></table></figure><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController:"></a>@RestController:</h3><p>用于标注控制层组件(如struts中的action)，包含@Controller和@ResponseBody。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class APIUserController &#123;&#125;</div></pre></td></tr></table></figure><h3 id="ResponseBody："><a href="#ResponseBody：" class="headerlink" title="@ResponseBody："></a>@ResponseBody：</h3><p>表示该方法的返回结果直接写入HTTP response body中<br>一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@responsebody后，会直接返回json数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value =<span class="string">"/api"</span>, method = RequestMethod.GET)</div><div class="line">@ResponseBody</div><div class="line">public String list(SystemUser systemUser) &#123;</div><div class="line">    SystemUser systemUsers = systemUserService.insert(systemUser);</div><div class="line">    <span class="built_in">return</span> JSON.toJSONString(<span class="string">"1111"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Component："><a href="#Component：" class="headerlink" title="@Component："></a>@Component：</h3><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public @interface Service &#123;</div><div class="line">    String value() default <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ComponentScan："><a href="#ComponentScan：" class="headerlink" title="@ComponentScan："></a>@ComponentScan：</h3><h5 id="不要配置到具体的包上边-那样只是扫描你配置的那个包-其他的包都不会扫描"><a href="#不要配置到具体的包上边-那样只是扫描你配置的那个包-其他的包都不会扫描" class="headerlink" title="不要配置到具体的包上边  那样只是扫描你配置的那个包  其他的包都不会扫描"></a>不要配置到具体的包上边  那样只是扫描你配置的那个包  其他的包都不会扫描</h5><p>组件扫描。个人理解相当于<context:component-scan>，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean。</context:component-scan></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@ComponentScan(value=<span class="string">"com.kingdom"</span>)</div><div class="line">@SpringBootApplication</div><div class="line">public class SpecialtymallApplication &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(SpecialtymallApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Configuration："><a href="#Configuration：" class="headerlink" title="@Configuration："></a>@Configuration：</h3><p>指出该类是 Bean 配置的信息源，相当于XML中的<beans></beans>，一般加在主类上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableAutoConfiguration</div><div class="line">@ComponentScan</div><div class="line">public class SpecialtymallApplication &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(SpecialtymallApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean:"></a>@Bean:</h3><p>相当于XML中的<bean></bean>,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。</p><h3 id="EnableAutoConfiguration："><a href="#EnableAutoConfiguration：" class="headerlink" title="@EnableAutoConfiguration："></a>@EnableAutoConfiguration：</h3><p>让 Spring Boot 根据应用所声明的依赖来对 Spring 框架进行自动配置，一般加在主类上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableAutoConfiguration</div><div class="line">@ComponentScan</div><div class="line">public class SpecialtymallApplication &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(SpecialtymallApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired:"></a>@AutoWired:</h3><p>byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。<br>当加上（required=false）时，就算找不到bean也不报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class APIUserController &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private SystemUserService systemUserService;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Qualifier："><a href="#Qualifier：" class="headerlink" title="@Qualifier："></a>@Qualifier：</h3><p>当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用</p><h3 id="Resource-name-”name”-type-”type”-："><a href="#Resource-name-”name”-type-”type”-：" class="headerlink" title="@Resource(name=”name”,type=”type”)："></a>@Resource(name=”name”,type=”type”)：</h3><p>没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><h3 id="RequestMapping："><a href="#RequestMapping：" class="headerlink" title="@RequestMapping："></a>@RequestMapping：</h3><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>该注解有六个属性：<br>params:指定request中必须包含某些参数值是，才让该方法处理。<br>headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。<br>value:指定请求的实际地址，指定的地址可以是URI Template 模式<br>method:指定请求的method类型， GET、POST、PUT、DELETE等<br>consumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;<br>produces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class APIUserController &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private SystemUserService systemUserService;</div><div class="line"></div><div class="line"></div><div class="line">    @RequestMapping(value =<span class="string">"/api/admin/systemUser/create"</span>, method = RequestMethod.POST)</div><div class="line">    public String list(SystemUser systemUser) &#123;</div><div class="line">//        SystemUser systemUsers = systemUserService.insert(systemUser);</div><div class="line">        <span class="built_in">return</span> JSON.toJSONString(systemUser);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="RequestParam："><a href="#RequestParam：" class="headerlink" title="@RequestParam："></a>@RequestParam：</h3><p>用在方法的参数前面。<br>@RequestParam String a =request.getParameter(“a”)。</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable:"></a>@PathVariable:</h3><p>路径变量。参数与大括号里的名字一样要相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RequestMapping(<span class="string">"user/get/mac/&#123;macAddress&#125;"</span>)</div><div class="line">public String getByMacAddress(@PathVariable String macAddress)&#123;</div><div class="line">　　//<span class="keyword">do</span> something;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Profiles"><a href="#Profiles" class="headerlink" title="@Profiles"></a>@Profiles</h3><p>Spring Profiles提供了一种隔离应用程序配置的方式，并让这些配置只能在特定的环境下生效。<br>任何@Component或@Configuration都能被@Profile标记，从而限制加载它的时机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@Profile(<span class="string">"prod"</span>)</div><div class="line">public class ProductionConfiguration &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>Spring Boot将尝试校验外部的配置，默认使用JSR-303（如果在classpath路径中）。<br>你可以轻松的为你的@ConfigurationProperties类添加JSR-303 javax.validation约束注解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@ConfigurationProperties(prefix=<span class="string">"connection"</span>)</div><div class="line">public class ConnectionSettings &#123;</div><div class="line">@NotNull</div><div class="line">private InetAddress remoteAddress;</div><div class="line">// ... getters and setters</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ControllerAdvice："><a href="#ControllerAdvice：" class="headerlink" title="@ControllerAdvice："></a>@ControllerAdvice：</h3><p>包含@Component。可以被扫描到。<br>统一处理异常。</p><h3 id="ExceptionHandler（Exception-class）："><a href="#ExceptionHandler（Exception-class）：" class="headerlink" title="@ExceptionHandler（Exception.class）："></a>@ExceptionHandler（Exception.class）：</h3><p>用在方法上面表示遇到这个异常就执行以下方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring &amp;amp; spring boot  注解汇总  及  说明  xXx&lt;/p&gt;
&lt;h3 id=&quot;SpringBootApplication&quot;&gt;&lt;a href=&quot;#SpringBootApplication&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="spring boot 注解" scheme="http://yoursite.com/categories/spring-boot-%E6%B3%A8%E8%A7%A3/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
      <category term="spring-boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://yoursite.com/2017/12/05/spring-ioc/"/>
    <id>http://yoursite.com/2017/12/05/spring-ioc/</id>
    <published>2017-12-05T02:17:02.322Z</published>
    <updated>2017-12-05T02:17:02.318Z</updated>
    
    <content type="html"><![CDATA[<p>spring-ioc spring-aop 控制反转  切面编程 xXx</p><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC：IOC，另外一种说法叫DI（Dependency Injection），即依赖注入。它并不是一种技术实现，而是一种设计思想。在任何一个有实际开发意义的程序项目中，我们会使用很多类来描述它们特有的功能，并且通过类与类之间的相互协作来完成特定的业务逻辑。这个时候，每个类都需要负责管理与自己有交互的类的引用和依赖，代码将会变的异常难以维护和极度的高耦合。而IOC的出现正是用来解决这个问题，我们通过IOC将这些相互依赖对象的创建、协调工作交给Spring容器去处理，每个对象只需要关注其自身的业务逻辑关系就可以了。在这样的角度上来看，获得依赖的对象的方式，进行了反转，变成了由spring容器控制对象如何获取外部资源（包括其他对象和文件资料等等）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">举例：某一天，你生病了，但是你不清楚自己到底得了什么病，你只知道自己头疼，咳嗽，全身无力。这个时候你决定去药店买药，药店有很多种药，仅仅是治疗头疼就有好几十种，还有西药中药等区别。然后你自己看了看说明书，选择了一盒你自己觉得最能治疗自己病症的药，付钱吃药，期待可以早点好起来。 </div><div class="line">但是这个过程，对于一个病人来说，太辛苦了。头疼，咳嗽，全身无力，还要一个个的看药品说明书，一个个的比较哪个药比较好，简直是太累了。这个时候，你决定直接去医院看医生。 </div><div class="line">医生给你做了检查，知道你的病症是什么，有什么原因引起的；同时医生非常了解有哪些药能治疗你的病痛，并且能根据你的自身情况进行筛选。只需要短短的十几分钟，你就能拿到对症下药的药品，即省时又省力。</div></pre></td></tr></table></figure><p>在上面这个例子中，IOC起到的就是医生的作用，它收集你的需求要求，并且对症下药，直接把药开给你。你就是对象，药品就是你所需要的外部资源。通过医生，你不用再去找药品，而是通过医生把药品开给你。这就是整个IOC的精髓所在。</p><h3 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h3><p>AOP：面向切面编程，往往被定义为促使软件系统实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。除了实现自身核心功能之外，这些组件还经常承担着额外的职责。例如日志、事务管理和安全这样的核心服务经常融入到自身具有核心业务逻辑的组件中去。这些系统服务经常被称为横切关注点，因为它们会跨越系统的多个组件。<br>AOP的概念不好像IOC一样实例化举例，现在我们以一个系统中的具体实现来讲讲AOP具体是个什么技术。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我们以系统中常用到的事务管控举例子。在系统操作数据库的过程中，不可避免地要考虑到事务相关的内容。如果在每一个方法中都新建一个事务管理器，那么无疑是对代码严重的耦合和侵入。为了简化我们的开发过程（实际上spring所做的一切实现都是为了简化开发过程），需要把事务相关的代码抽成出来做为一个独立的模块。通过AOP，确认每一个操作数据库方法为一个连接点，这些连接点组成了一个切面。当程序运行到其中某个一个切点时，我们将事务管理模块顺势织入对象中，通过通知功能，完成整个事务管控的实现。这样一来，所有的操作数据库的方法中不需要再单独关心事务管理的内容，只需要关注自身的业务代码的实现即可。所有的事务管控相关的内容都通过AOP的方式进行了实现。简化了代码的内容，将目标对象复杂的内容进行解耦，分离业务逻辑与横切关注点。</div></pre></td></tr></table></figure><p>下面介绍一下AOP相关的术语：</p><p>通知： 通知定义了切面是什么以及何时使用的概念。Spring 切面可以应用5种类型的通知：</p><p>前置通知（Before）：在目标方法被调用之前调用通知功能。<br>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么。<br>返回通知（After-returning）：在目标方法成功执行之后调用通知。<br>异常通知（After-throwing）：在目标方法抛出异常后调用通知。<br>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。<br>连接点：是在应用执行过程中能够插入切面的一个点。</p><p>切点： 切点定义了切面在何处要织入的一个或者多个连接点。<br>切面：是通知和切点的结合。通知和切点共同定义了切面的全部内容。<br>引入：引入允许我们向现有类添加新方法或属性。<br>织入：是把切面应用到目标对象，并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期中有多个点可以进行织入：<br>编译期： 在目标类编译时，切面被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。<br>类加载期：切面在目标加载到JVM时被织入。这种方式需要特殊的类加载器(class loader)它可以在目标类被引入应用之前增强该目标类的字节码。<br>运行期： 切面在应用运行到某个时刻时被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring-ioc spring-aop 控制反转  切面编程 xXx&lt;/p&gt;
&lt;h3 id=&quot;IOC&quot;&gt;&lt;a href=&quot;#IOC&quot; class=&quot;headerlink&quot; title=&quot;IOC&quot;&gt;&lt;/a&gt;IOC&lt;/h3&gt;&lt;p&gt;IOC：IOC，另外一种说法叫DI（Depe
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="http://yoursite.com/2017/11/28/Mybatis_Generator/"/>
    <id>http://yoursite.com/2017/11/28/Mybatis_Generator/</id>
    <published>2017-11-28T07:44:21.172Z</published>
    <updated>2017-11-28T07:44:21.168Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis Generator最完整配置详解.xXx</p><h3 id="Mybatis-Generator最完整配置详解"><a href="#Mybatis-Generator最完整配置详解" class="headerlink" title="Mybatis Generator最完整配置详解"></a>Mybatis Generator最完整配置详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE generatorConfiguration</div><div class="line">  PUBLIC <span class="string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></div><div class="line"><span class="string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</div><div class="line">&lt;!-- 配置生成器 --&gt;</div><div class="line">&lt;generatorConfiguration&gt;</div><div class="line">&lt;!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用<span class="variable">$&#123;propertyKey&#125;</span>的方式来引用配置项</div><div class="line">    resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties        </div><div class="line">    url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.</div><div class="line">    注意，两个属性只能选址一个;</div><div class="line"></div><div class="line">    另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用</div><div class="line">&lt;properties resource=<span class="string">""</span> url=<span class="string">""</span> /&gt;</div><div class="line"> --&gt;</div><div class="line"></div><div class="line"> &lt;!-- 在MBG工作的时候，需要额外加载的依赖包</div><div class="line">     location属性指明加载jar/zip包的全路径</div><div class="line">&lt;classPathEntry location=<span class="string">"/Program Files/IBM/SQLLIB/java/db2java.zip"</span> /&gt;</div><div class="line">  --&gt;</div><div class="line"></div><div class="line">&lt;!-- </div><div class="line">    context:生成一组对象的环境 </div><div class="line">    id:必选，上下文id，用于在生成错误时提示</div><div class="line">    defaultModelType:指定生成对象的样式</div><div class="line">   --特别说明 我的前面三个都不管用,不知道为啥</div><div class="line">        1，conditional：类似hierarchical；</div><div class="line">        2，flat：所有内容（主键，blob）等全部生成在一个对象中；</div><div class="line">        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)</div><div class="line">    targetRuntime:</div><div class="line">        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；</div><div class="line">        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；</div><div class="line">    introspectedColumnImpl：类全限定名，用于扩展MBG</div><div class="line">--&gt;</div><div class="line">&lt;context id=<span class="string">"mysql"</span> defaultModelType=<span class="string">"hierarchical"</span> targetRuntime=<span class="string">"MyBatis3Simple"</span> &gt;</div><div class="line"></div><div class="line">    &lt;!-- 自动识别数据库关键字，默认<span class="literal">false</span>，如果设置为<span class="literal">true</span>，根据SqlReservedWords中定义的关键字列表；</div><div class="line">        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</div><div class="line">     --&gt;</div><div class="line">    &lt;property name=<span class="string">"autoDelimitKeywords"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line">    &lt;!-- 生成的Java文件的编码 --&gt;</div><div class="line">    &lt;property name=<span class="string">"javaFileEncoding"</span> value=<span class="string">"UTF-8"</span>/&gt;</div><div class="line">    &lt;!-- 格式化java代码 --&gt;</div><div class="line">    &lt;property name=<span class="string">"javaFormatter"</span> value=<span class="string">"org.mybatis.generator.api.dom.DefaultJavaFormatter"</span>/&gt;</div><div class="line">    &lt;!-- 格式化XML代码 --&gt;</div><div class="line">    &lt;property name=<span class="string">"xmlFormatter"</span> value=<span class="string">"org.mybatis.generator.api.dom.DefaultXmlFormatter"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</div><div class="line">    &lt;property name=<span class="string">"beginningDelimiter"</span> value=<span class="string">"`"</span>/&gt;</div><div class="line">    &lt;property name=<span class="string">"endingDelimiter"</span> value=<span class="string">"`"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;!-- 必须要有的，使用这个配置链接数据库</div><div class="line">        @TODO:是否可以扩展</div><div class="line">     --&gt;</div><div class="line">    &lt;jdbcConnection driverClass=<span class="string">"com.mysql.jdbc.Driver"</span> connectionURL=<span class="string">"jdbc:mysql:///pss"</span> userId=<span class="string">"root"</span> password=<span class="string">"admin"</span>&gt;</div><div class="line">        &lt;!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 --&gt;</div><div class="line">    &lt;/jdbcConnection&gt;</div><div class="line"></div><div class="line">    &lt;!-- java类型处理器 </div><div class="line">        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</div><div class="line">        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型； </div><div class="line">    --&gt;</div><div class="line">    &lt;javaTypeResolver <span class="built_in">type</span>=<span class="string">"org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl"</span>&gt;</div><div class="line">        &lt;!-- </div><div class="line">            <span class="literal">true</span>：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</div><div class="line">            <span class="literal">false</span>：默认,</div><div class="line">                scale&gt;0;length&gt;18：使用BigDecimal;</div><div class="line">                scale=0;length[10,18]：使用Long；</div><div class="line">                scale=0;length[5,9]：使用Integer；</div><div class="line">                scale=0;length&lt;5：使用Short；</div><div class="line">         --&gt;</div><div class="line">        &lt;property name=<span class="string">"forceBigDecimals"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line">    &lt;/javaTypeResolver&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;!-- java模型创建器，是必须要的元素</div><div class="line">        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类</div><div class="line">        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</div><div class="line">        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</div><div class="line">     --&gt;</div><div class="line">    &lt;javaModelGenerator targetPackage=<span class="string">"com._520it.mybatis.domain"</span> targetProject=<span class="string">"src/main/java"</span>&gt;</div><div class="line">        &lt;!--  <span class="keyword">for</span> MyBatis3/MyBatis3Simple</div><div class="line">            自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；</div><div class="line">         --&gt;</div><div class="line">        &lt;property name=<span class="string">"constructorBased"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为<span class="literal">false</span> --&gt;</div><div class="line">        &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- <span class="keyword">for</span> MyBatis3 / MyBatis3Simple</div><div class="line">            是否创建一个不可变的类，如果为<span class="literal">true</span>，</div><div class="line">            那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类</div><div class="line">         --&gt;</div><div class="line">        &lt;property name=<span class="string">"immutable"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 设置一个根对象，</div><div class="line">            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项</div><div class="line">            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：</div><div class="line">                1，属性名相同，类型相同，有相同的getter/setter方法；</div><div class="line">         --&gt;</div><div class="line">        &lt;property name=<span class="string">"rootClass"</span> value=<span class="string">"com._520it.mybatis.domain.BaseDomain"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</div><div class="line">        &lt;property name=<span class="string">"trimStrings"</span> value=<span class="string">"true"</span>/&gt;</div><div class="line">    &lt;/javaModelGenerator&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;!-- 生成SQL map的XML文件生成器，</div><div class="line">        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），</div><div class="line">            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置</div><div class="line">        targetPackage/targetProject:同javaModelGenerator</div><div class="line">     --&gt;</div><div class="line">    &lt;sqlMapGenerator targetPackage=<span class="string">"com._520it.mybatis.mapper"</span> targetProject=<span class="string">"src/main/resources"</span>&gt;</div><div class="line">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为<span class="literal">false</span> --&gt;</div><div class="line">        &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"true"</span>/&gt;</div><div class="line">    &lt;/sqlMapGenerator&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 </div><div class="line">        targetPackage/targetProject:同javaModelGenerator</div><div class="line">        <span class="built_in">type</span>：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：</div><div class="line">            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；</div><div class="line">            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；</div><div class="line">            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；</div><div class="line">        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER</div><div class="line">    --&gt;</div><div class="line">    &lt;javaClientGenerator targetPackage=<span class="string">"com._520it.mybatis.mapper"</span> <span class="built_in">type</span>=<span class="string">"ANNOTATEDMAPPER"</span> targetProject=<span class="string">"src/main/java"</span>&gt;</div><div class="line">        &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为<span class="literal">false</span> --&gt;</div><div class="line">        &lt;property name=<span class="string">"enableSubPackages"</span> value=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查</div><div class="line">        &lt;property name=<span class="string">"rootInterface"</span> value=<span class="string">""</span>/&gt;</div><div class="line">         --&gt;</div><div class="line">    &lt;/javaClientGenerator&gt;</div><div class="line"></div><div class="line">    &lt;!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素</div><div class="line">        选择的table会生成一下文件：</div><div class="line">        1，SQL map文件</div><div class="line">        2，生成一个主键类；</div><div class="line">        3，除了BLOB和主键的其他字段的类；</div><div class="line">        4，包含BLOB的类；</div><div class="line">        5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；</div><div class="line">        6，Mapper接口（可选）</div><div class="line"></div><div class="line">        tableName（必要）：要生成对象的表名；</div><div class="line">        注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会</div><div class="line">            根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：</div><div class="line">            1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；</div><div class="line">            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；</div><div class="line">            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；</div><div class="line">            4，否则，使用指定的大小写格式查询；</div><div class="line">        另外的，如果在创建表的时候，使用的<span class="string">""</span>把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；</div><div class="line">        这个时候，请设置delimitIdentifiers=<span class="string">"true"</span>即可保留大小写格式；</div><div class="line"></div><div class="line">        可选：</div><div class="line">        1，schema：数据库的schema；</div><div class="line">        2，catalog：数据库的catalog；</div><div class="line">        3，<span class="built_in">alias</span>：为数据表设置的别名，如果设置了<span class="built_in">alias</span>，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName</div><div class="line">        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</div><div class="line">        5，enableInsert（默认<span class="literal">true</span>）：指定是否生成insert语句；</div><div class="line">        6，enableSelectByPrimaryKey（默认<span class="literal">true</span>）：指定是否生成按照主键查询对象的语句（就是getById或get）；</div><div class="line">        7，enableSelectByExample（默认<span class="literal">true</span>）：MyBatis3Simple为<span class="literal">false</span>，指定是否生成动态查询语句；</div><div class="line">        8，enableUpdateByPrimaryKey（默认<span class="literal">true</span>）：指定是否生成按照主键修改对象的语句（即update)；</div><div class="line">        9，enableDeleteByPrimaryKey（默认<span class="literal">true</span>）：指定是否生成按照主键删除对象的语句（即delete）；</div><div class="line">        10，enableDeleteByExample（默认<span class="literal">true</span>）：MyBatis3Simple为<span class="literal">false</span>，指定是否生成动态删除语句；</div><div class="line">        11，enableCountByExample（默认<span class="literal">true</span>）：MyBatis3Simple为<span class="literal">false</span>，指定是否生成动态查询总条数语句（用于分页的总条数查询）；</div><div class="line">        12，enableUpdateByExample（默认<span class="literal">true</span>）：MyBatis3Simple为<span class="literal">false</span>，指定是否生成动态修改语句（只修改对象中不为空的属性）；</div><div class="line">        13，modelType：参考context元素的defaultModelType，相当于覆盖；</div><div class="line">        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）</div><div class="line">        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为<span class="literal">false</span>，delimitIdentifiers参考context的属性</div><div class="line"></div><div class="line">        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；</div><div class="line">     --&gt;</div><div class="line">    &lt;table tableName=<span class="string">"userinfo"</span> &gt;</div><div class="line"></div><div class="line">        &lt;!-- 参考 javaModelGenerator 的 constructorBased属性--&gt;</div><div class="line">        &lt;property name=<span class="string">"constructorBased"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 默认为<span class="literal">false</span>，如果设置为<span class="literal">true</span>，在生成的SQL中，table名字不会加上catalog或schema； --&gt;</div><div class="line">        &lt;property name=<span class="string">"ignoreQualifiersAtRuntime"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 参考 javaModelGenerator 的 immutable 属性 --&gt;</div><div class="line">        &lt;property name=<span class="string">"immutable"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 指定是否只生成domain类，如果设置为<span class="literal">true</span>，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 --&gt;</div><div class="line">        &lt;property name=<span class="string">"modelOnly"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 参考 javaModelGenerator 的 rootClass 属性 </div><div class="line">        &lt;property name=<span class="string">"rootClass"</span> value=<span class="string">""</span>/&gt;</div><div class="line">         --&gt;</div><div class="line"></div><div class="line">        &lt;!-- 参考javaClientGenerator 的  rootInterface 属性</div><div class="line">        &lt;property name=<span class="string">"rootInterface"</span> value=<span class="string">""</span>/&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        &lt;!-- 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog </div><div class="line">        &lt;property name=<span class="string">"runtimeCatalog"</span> value=<span class="string">""</span>/&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        &lt;!-- 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema </div><div class="line">        &lt;property name=<span class="string">"runtimeSchema"</span> value=<span class="string">""</span>/&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        &lt;!-- 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename </div><div class="line">        &lt;property name=<span class="string">"runtimeTableName"</span> value=<span class="string">""</span>/&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        &lt;!-- 注意，该属性只针对MyBatis3Simple有用；</div><div class="line">            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；</div><div class="line">         --&gt;</div><div class="line">        &lt;property name=<span class="string">"selectAllOrderByClause"</span> value=<span class="string">"age desc,username asc"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;!-- 如果设置为<span class="literal">true</span>，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate --&gt;</div><div class="line">        &lt;property name=<span class="string">"useActualColumnNames"</span> value=<span class="string">"false"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;!-- generatedKey用于生成生成主键的方法，</div><div class="line">            如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</div><div class="line">            column:主键的列名；</div><div class="line">            sqlStatement：要生成的selectKey语句，有以下可选项：</div><div class="line">                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</div><div class="line">                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</div><div class="line">                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</div><div class="line">                Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</div><div class="line">                HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()</div><div class="line">                Informix  :相当于selectKey的SQL为：select dbinfo(<span class="string">'sqlca.sqlerrd1'</span>) from systables <span class="built_in">where</span> tabid=1</div><div class="line">                MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</div><div class="line">                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</div><div class="line">                SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY</div><div class="line">                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys=<span class="string">"true"</span>和keyProperty属性</div><div class="line">        &lt;generatedKey column=<span class="string">""</span> sqlStatement=<span class="string">""</span>/&gt;</div><div class="line">         --&gt;</div><div class="line"></div><div class="line">        &lt;!-- </div><div class="line">            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，</div><div class="line">            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；</div><div class="line">            那么就可以设置searchString为<span class="string">"^CUST_"</span>，并使用空白替换，那么生成的Customer对象中的属性名称就不是</div><div class="line">            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；</div><div class="line"></div><div class="line">            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，</div><div class="line">            如果使用了columnOverride元素，该属性无效；</div><div class="line"></div><div class="line">        &lt;columnRenamingRule searchString=<span class="string">""</span> replaceString=<span class="string">""</span>/&gt;</div><div class="line">         --&gt;</div><div class="line"></div><div class="line"></div><div class="line">         &lt;!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；</div><div class="line">             column:要重新设置的列名；</div><div class="line">             注意，一个table元素中可以有多个columnOverride元素哈~</div><div class="line">          --&gt;</div><div class="line">         &lt;columnOverride column=<span class="string">"username"</span>&gt;</div><div class="line">             &lt;!-- 使用property属性来指定列要生成的属性名称 --&gt;</div><div class="line">             &lt;property name=<span class="string">"property"</span> value=<span class="string">"userName"</span>/&gt;</div><div class="line"></div><div class="line">             &lt;!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名</div><div class="line">             &lt;property name=<span class="string">"javaType"</span> value=<span class="string">""</span>/&gt;</div><div class="line">              --&gt;</div><div class="line"></div><div class="line">             &lt;!-- jdbcType用于指定该列的JDBC类型 </div><div class="line">             &lt;property name=<span class="string">"jdbcType"</span> value=<span class="string">""</span>/&gt;</div><div class="line">              --&gt;</div><div class="line"></div><div class="line">             &lt;!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名</div><div class="line">                 注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler</div><div class="line">                 只会生成类似：<span class="built_in">where</span> id = <span class="comment">#&#123;id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler&#125;的参数描述</span></div><div class="line">             &lt;property name=<span class="string">"jdbcType"</span> value=<span class="string">""</span>/&gt;</div><div class="line">             --&gt;</div><div class="line"></div><div class="line">             &lt;!-- 参考table元素的delimitAllColumns配置，默认为<span class="literal">false</span></div><div class="line">             &lt;property name=<span class="string">"delimitedColumnName"</span> value=<span class="string">""</span>/&gt;</div><div class="line">              --&gt;</div><div class="line">         &lt;/columnOverride&gt;</div><div class="line"></div><div class="line">         &lt;!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现 </div><div class="line">             column:指定要忽略的列的名字；</div><div class="line">             delimitedColumnName：参考table元素的delimitAllColumns配置，默认为<span class="literal">false</span></div><div class="line"></div><div class="line">             注意，一个table元素中可以有多个ignoreColumn元素</div><div class="line">         &lt;ignoreColumn column=<span class="string">"deptId"</span> delimitedColumnName=<span class="string">""</span>/&gt;</div><div class="line">         --&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line"></div><div class="line">&lt;/context&gt;</div><div class="line"></div><div class="line">&lt;/generatorConfiguration&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mybatis Generator最完整配置详解.xXx&lt;/p&gt;
&lt;h3 id=&quot;Mybatis-Generator最完整配置详解&quot;&gt;&lt;a href=&quot;#Mybatis-Generator最完整配置详解&quot; class=&quot;headerlink&quot; title=&quot;Mybatis 
      
    
    </summary>
    
      <category term="Mybatis Generator" scheme="http://yoursite.com/categories/Mybatis-Generator/"/>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/11/28/regular_expression/"/>
    <id>http://yoursite.com/2017/11/28/regular_expression/</id>
    <published>2017-11-28T07:44:21.168Z</published>
    <updated>2017-11-28T07:44:21.164Z</updated>
    
    <content type="html"><![CDATA[<p>整理了一下正则,对你会有帮助的!xXx</p><p>###基本用法</p><p>runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p><p>runoo<em>b，可以匹配 runob、runoob、runoooooob 等，</em> 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p><p>colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理了一下正则,对你会有帮助的!xXx&lt;/p&gt;
&lt;p&gt;###基本用法&lt;/p&gt;
&lt;p&gt;runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。&lt;/p&gt;
&lt;p&gt;runoo&lt;em&gt;b，可以匹配 runo
      
    
    </summary>
    
      <category term="java 正则表达式" scheme="http://yoursite.com/categories/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SELECT</title>
    <link href="http://yoursite.com/2017/11/27/select/"/>
    <id>http://yoursite.com/2017/11/27/select/</id>
    <published>2017-11-27T10:35:36.463Z</published>
    <updated>2017-11-27T10:35:36.459Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是做一下Java的查询算法的整理,xXx</p><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">int BinarySearch1(int a[], int value, int n)</div><div class="line">&#123;</div><div class="line">    int low, high, mid;</div><div class="line">    low = 0;</div><div class="line">    high = n-1;</div><div class="line">    <span class="keyword">while</span>(low&lt;=high)</div><div class="line">    &#123;</div><div class="line">        mid = (low+high)/2;</div><div class="line">        <span class="keyword">if</span>(a[mid]==value)</div><div class="line">            <span class="built_in">return</span> mid;</div><div class="line">        <span class="keyword">if</span>(a[mid]&gt;value)</div><div class="line">            high = mid-1;</div><div class="line">        <span class="keyword">if</span>(a[mid]&lt;value)</div><div class="line">            low = mid+1;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二分法查找-递归"><a href="#二分法查找-递归" class="headerlink" title="二分法查找(递归)"></a>二分法查找(递归)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int BinarySearch2(int a[], int value, int low, int high)</div><div class="line">&#123;</div><div class="line">    int mid = low+(high-low)/2;</div><div class="line">    <span class="keyword">if</span>(a[mid]==value)</div><div class="line">        <span class="built_in">return</span> mid;</div><div class="line">    <span class="keyword">if</span>(a[mid]&gt;value)</div><div class="line">        <span class="built_in">return</span> BinarySearch2(a, value, low, mid-1);</div><div class="line">    <span class="keyword">if</span>(a[mid]&lt;value)</div><div class="line">        <span class="built_in">return</span> BinarySearch2(a, value, mid+1, high);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是做一下Java的查询算法的整理,xXx&lt;/p&gt;
&lt;h3 id=&quot;二分法查找&quot;&gt;&lt;a href=&quot;#二分法查找&quot; class=&quot;headerlink&quot; title=&quot;二分法查找&quot;&gt;&lt;/a&gt;二分法查找&lt;/h3&gt;&lt;figure class=&quot;highlight ba
      
    
    </summary>
    
      <category term="java SE" scheme="http://yoursite.com/categories/java-SE/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/27/hello-world/"/>
    <id>http://yoursite.com/2017/11/27/hello-world/</id>
    <published>2017-11-27T09:04:07.991Z</published>
    <updated>2017-11-27T09:04:07.991Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br>xXx</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>SORT</title>
    <link href="http://yoursite.com/2017/11/27/sort/"/>
    <id>http://yoursite.com/2017/11/27/sort/</id>
    <published>2017-11-27T08:53:13.215Z</published>
    <updated>2017-11-27T08:53:13.215Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是做一下Java的排序算法的整理,xXx</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 冒泡排序</div><div class="line"> */</div><div class="line">public class BubbleSort &#123;</div><div class="line">　　public static void main(String[] args) &#123;</div><div class="line">　　　　int[] arr=&#123;6,3,8,2,9,1&#125;;</div><div class="line">　　　　System.out.println(<span class="string">"排序前数组为："</span>);</div><div class="line">　　　　<span class="keyword">for</span>(int num:arr)&#123;</div><div class="line">　　　　　　System.out.print(num+<span class="string">" "</span>);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">for</span>(int i=0;i&lt;arr.length-1;i++)&#123;//外层循环控制排序趟数</div><div class="line">　　　　　　<span class="keyword">for</span>(int j=0;j&lt;arr.length-1-i;j++)&#123;//内层循环控制每一趟排序多少次</div><div class="line">　　　　　　　　<span class="keyword">if</span>(arr[j]&gt;arr[j+1])&#123;</div><div class="line">　　　　　　　　　　int temp=arr[j];</div><div class="line">　　　　　　　　　　arr[j]=arr[j+1];</div><div class="line">　　　　　　　　　　arr[j+1]=temp;</div><div class="line">　　　　　　　　&#125;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125; </div><div class="line">　　　　System.out.println();</div><div class="line">　　　　System.out.println(<span class="string">"排序后的数组为："</span>);</div><div class="line"> 　　　　<span class="keyword">for</span>(int num:arr)&#123;</div><div class="line"> 　　　　　　System.out.print(num+<span class="string">" "</span>);</div><div class="line"> 　　　　&#125; </div><div class="line">　　&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="插入式排序"><a href="#插入式排序" class="headerlink" title="插入式排序"></a>插入式排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class InsertSort &#123;</div><div class="line">    public static void insertSort(int[] a) &#123;</div><div class="line">        int i, j, insertNote;// 要插入的数据</div><div class="line">        <span class="keyword">for</span> (i = 1; i &lt; a.length; i++) &#123;// 从数组的第二个元素开始循环将数组中的元素插入</div><div class="line">            insertNote = a[i];// 设置数组中的第2个元素为第一次循环要插入的数据</div><div class="line">            j = i - 1;</div><div class="line">            <span class="keyword">while</span> (j &gt;= 0 &amp;&amp; insertNote &lt; a[j]) &#123;</div><div class="line">                a[j + 1] = a[j];// 如果要插入的元素小于第j个元素,就将第j个元素向后移动</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            a[j + 1] = insertNote;// 直到要插入的元素不小于第j个元素,将insertNote插入到数组中</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        int a[] = &#123; 38,65,97,76,13,27,49 &#125;;</div><div class="line">        insertSort(a);</div><div class="line">        System.out.println(Arrays.toString(a));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class SelectionSort &#123;</div><div class="line"> </div><div class="line">    public static void selectionSort(int[] a) &#123;</div><div class="line">        int n = a.length;</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</div><div class="line">            int k = i;</div><div class="line">            // 找出最小值的小标</div><div class="line">            <span class="keyword">for</span> (int j = i + 1; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &lt; a[k]) &#123;</div><div class="line">                    k = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 将最小值放到排序序列末尾</div><div class="line">            <span class="keyword">if</span> (k &gt; i) &#123;</div><div class="line">                int tmp = a[i];</div><div class="line">                a[i] = a[k];</div><div class="line">                a[k] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        int[] b = &#123; 49, 38, 65, 97, 76, 13, 27, 50 &#125;;</div><div class="line">        selectionSort(b);</div><div class="line">        <span class="keyword">for</span> (int i : b)</div><div class="line">            System.out.print(i + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void <span class="function"><span class="title">listSort1</span></span>()&#123;</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</div><div class="line">    list.add(1);</div><div class="line">    list.add(55);</div><div class="line">    list.add(9);</div><div class="line">    list.add(0);</div><div class="line">    list.add(2);</div><div class="line">    Collections.sort(list);//使用Collections的sort方法</div><div class="line">    <span class="keyword">for</span>(int a :list)&#123;</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是做一下Java的排序算法的整理,xXx&lt;/p&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
      <category term="java SE" scheme="http://yoursite.com/categories/java-SE/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
