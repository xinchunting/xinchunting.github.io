<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X x</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-27T10:33:06.872Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xXx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring</title>
    <link href="http://yoursite.com/2017/11/27/spring-ioc/"/>
    <id>http://yoursite.com/2017/11/27/spring-ioc/</id>
    <published>2017-11-27T10:33:06.876Z</published>
    <updated>2017-11-27T10:33:06.872Z</updated>
    
    <content type="html"><![CDATA[<p>spring-ioc 控制反转 xXx</p><p>###IOC<br>IOC：IOC，另外一种说法叫DI（Dependency Injection），即依赖注入。它并不是一种技术实现，而是一种设计思想。在任何一个有实际开发意义的程序项目中，我们会使用很多类来描述它们特有的功能，并且通过类与类之间的相互协作来完成特定的业务逻辑。这个时候，每个类都需要负责管理与自己有交互的类的引用和依赖，代码将会变的异常难以维护和极度的高耦合。而IOC的出现正是用来解决这个问题，我们通过IOC将这些相互依赖对象的创建、协调工作交给Spring容器去处理，每个对象只需要关注其自身的业务逻辑关系就可以了。在这样的角度上来看，获得依赖的对象的方式，进行了反转，变成了由spring容器控制对象如何获取外部资源（包括其他对象和文件资料等等）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">举例：某一天，你生病了，但是你不清楚自己到底得了什么病，你只知道自己头疼，咳嗽，全身无力。这个时候你决定去药店买药，药店有很多种药，仅仅是治疗头疼就有好几十种，还有西药中药等区别。然后你自己看了看说明书，选择了一盒你自己觉得最能治疗自己病症的药，付钱吃药，期待可以早点好起来。 </div><div class="line">但是这个过程，对于一个病人来说，太辛苦了。头疼，咳嗽，全身无力，还要一个个的看药品说明书，一个个的比较哪个药比较好，简直是太累了。这个时候，你决定直接去医院看医生。 </div><div class="line">医生给你做了检查，知道你的病症是什么，有什么原因引起的；同时医生非常了解有哪些药能治疗你的病痛，并且能根据你的自身情况进行筛选。只需要短短的十几分钟，你就能拿到对症下药的药品，即省时又省力。</div></pre></td></tr></table></figure><p>在上面这个例子中，IOC起到的就是医生的作用，它收集你的需求要求，并且对症下药，直接把药开给你。你就是对象，药品就是你所需要的外部资源。通过医生，你不用再去找药品，而是通过医生把药品开给你。这就是整个IOC的精髓所在。</p><p>###aop</p><p>AOP：面向切面编程，往往被定义为促使软件系统实现关注点的分离的技术。系统是由许多不同的组件所组成的，每一个组件各负责一块特定功能。除了实现自身核心功能之外，这些组件还经常承担着额外的职责。例如日志、事务管理和安全这样的核心服务经常融入到自身具有核心业务逻辑的组件中去。这些系统服务经常被称为横切关注点，因为它们会跨越系统的多个组件。<br>AOP的概念不好像IOC一样实例化举例，现在我们以一个系统中的具体实现来讲讲AOP具体是个什么技术。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我们以系统中常用到的事务管控举例子。在系统操作数据库的过程中，不可避免地要考虑到事务相关的内容。如果在每一个方法中都新建一个事务管理器，那么无疑是对代码严重的耦合和侵入。为了简化我们的开发过程（实际上spring所做的一切实现都是为了简化开发过程），需要把事务相关的代码抽成出来做为一个独立的模块。通过AOP，确认每一个操作数据库方法为一个连接点，这些连接点组成了一个切面。当程序运行到其中某个一个切点时，我们将事务管理模块顺势织入对象中，通过通知功能，完成整个事务管控的实现。这样一来，所有的操作数据库的方法中不需要再单独关心事务管理的内容，只需要关注自身的业务代码的实现即可。所有的事务管控相关的内容都通过AOP的方式进行了实现。简化了代码的内容，将目标对象复杂的内容进行解耦，分离业务逻辑与横切关注点。</div></pre></td></tr></table></figure><p>下面介绍一下AOP相关的术语：</p><p>通知： 通知定义了切面是什么以及何时使用的概念。Spring 切面可以应用5种类型的通知：</p><p>前置通知（Before）：在目标方法被调用之前调用通知功能。<br>后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么。<br>返回通知（After-returning）：在目标方法成功执行之后调用通知。<br>异常通知（After-throwing）：在目标方法抛出异常后调用通知。<br>环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。<br>连接点：是在应用执行过程中能够插入切面的一个点。</p><p>切点： 切点定义了切面在何处要织入的一个或者多个连接点。<br>切面：是通知和切点的结合。通知和切点共同定义了切面的全部内容。<br>引入：引入允许我们向现有类添加新方法或属性。<br>织入：是把切面应用到目标对象，并创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期中有多个点可以进行织入：<br>编译期： 在目标类编译时，切面被织入。这种方式需要特殊的编译器。AspectJ的织入编译器就是以这种方式织入切面的。<br>类加载期：切面在目标加载到JVM时被织入。这种方式需要特殊的类加载器(class loader)它可以在目标类被引入应用之前增强该目标类的字节码。<br>运行期： 切面在应用运行到某个时刻时被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;spring-ioc 控制反转 xXx&lt;/p&gt;
&lt;p&gt;###IOC&lt;br&gt;IOC：IOC，另外一种说法叫DI（Dependency Injection），即依赖注入。它并不是一种技术实现，而是一种设计思想。在任何一个有实际开发意义的程序项目中，我们会使用很多类来描述它们特有
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2017/11/27/regular_expression/"/>
    <id>http://yoursite.com/2017/11/27/regular_expression/</id>
    <published>2017-11-27T10:18:52.454Z</published>
    <updated>2017-11-27T10:18:52.454Z</updated>
    
    <content type="html"><![CDATA[<p>整理了一下正则,对你会有帮助的!xXx</p><p>###基本用法</p><p>runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</p><p>runoo<em>b，可以匹配 runob、runoob、runoooooob 等，</em> 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</p><p>colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</p><table><br><tr><td><br>字符<br></td><td><br>描述<br></td></tr><br><tr><td><br>\cx<br></td><td><br>    匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。<br></td></tr><br><tr><td><br>\f<br></td><td><br>匹配一个换页符。等价于 \x0c 和 \cL。<br></td></tr><br><tr><td><br>\n<br></td><td><br>匹配一个换行符。等价于 \x0a 和 \cJ。<br></td></tr><br><tr><td><br>\r<br></td><td><br>匹配一个回车符。等价于 \x0d 和 \cM。<br></td></tr><br><tr><td><br>\s<br></td><td><br>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。<br></td></tr><br><tr><td><br>\S<br></td><td><br>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。<br></td></tr><br><tr><td><br>\t<br></td><td><br>匹配一个制表符。等价于 \x09 和 \cI。<br></td></tr><br><tr><td><br>\v<br></td><td><br>匹配一个垂直制表符。等价于 \x0b 和 \cK。<br></td></tr><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理了一下正则,对你会有帮助的!xXx&lt;/p&gt;
&lt;p&gt;###基本用法&lt;/p&gt;
&lt;p&gt;runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。&lt;/p&gt;
&lt;p&gt;runoo&lt;em&gt;b，可以匹配 runo
      
    
    </summary>
    
      <category term="java 正则表达式" scheme="http://yoursite.com/categories/java-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/27/hello-world/"/>
    <id>http://yoursite.com/2017/11/27/hello-world/</id>
    <published>2017-11-27T09:04:07.991Z</published>
    <updated>2017-11-27T09:04:07.991Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br>xXx</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>SELECT</title>
    <link href="http://yoursite.com/2017/11/27/select/"/>
    <id>http://yoursite.com/2017/11/27/select/</id>
    <published>2017-11-27T09:04:07.987Z</published>
    <updated>2017-11-27T09:04:07.987Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是做一下Java的查询算法的整理,xXx</p><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">int BinarySearch1(int a[], int value, int n)</div><div class="line">&#123;</div><div class="line">    int low, high, mid;</div><div class="line">    low = 0;</div><div class="line">    high = n-1;</div><div class="line">    while(low&lt;=high)</div><div class="line">    &#123;</div><div class="line">        mid = (low+high)/2;</div><div class="line">        if(a[mid]==value)</div><div class="line">            return mid;</div><div class="line">        if(a[mid]&gt;value)</div><div class="line">            high = mid-1;</div><div class="line">        if(a[mid]&lt;value)</div><div class="line">            low = mid+1;</div><div class="line">    &#125;</div><div class="line">    return -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二分法查找-递归"><a href="#二分法查找-递归" class="headerlink" title="二分法查找(递归)"></a>二分法查找(递归)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int BinarySearch2(int a[], int value, int low, int high)</div><div class="line">&#123;</div><div class="line">    int mid = low+(high-low)/2;</div><div class="line">    if(a[mid]==value)</div><div class="line">        return mid;</div><div class="line">    if(a[mid]&gt;value)</div><div class="line">        return BinarySearch2(a, value, low, mid-1);</div><div class="line">    if(a[mid]&lt;value)</div><div class="line">        return BinarySearch2(a, value, mid+1, high);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是做一下Java的查询算法的整理,xXx&lt;/p&gt;
&lt;h3 id=&quot;二分法查找&quot;&gt;&lt;a href=&quot;#二分法查找&quot; class=&quot;headerlink&quot; title=&quot;二分法查找&quot;&gt;&lt;/a&gt;二分法查找&lt;/h3&gt;&lt;figure class=&quot;highlight pl
      
    
    </summary>
    
      <category term="java SE" scheme="http://yoursite.com/categories/java-SE/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SORT</title>
    <link href="http://yoursite.com/2017/11/27/sort/"/>
    <id>http://yoursite.com/2017/11/27/sort/</id>
    <published>2017-11-27T08:53:13.215Z</published>
    <updated>2017-11-27T08:53:13.215Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是做一下Java的排序算法的整理,xXx</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 冒泡排序</div><div class="line"> */</div><div class="line">public class BubbleSort &#123;</div><div class="line">　　public static void main(String[] args) &#123;</div><div class="line">　　　　int[] arr=&#123;6,3,8,2,9,1&#125;;</div><div class="line">　　　　System.out.println(<span class="string">"排序前数组为："</span>);</div><div class="line">　　　　<span class="keyword">for</span>(int num:arr)&#123;</div><div class="line">　　　　　　System.out.print(num+<span class="string">" "</span>);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">for</span>(int i=0;i&lt;arr.length-1;i++)&#123;//外层循环控制排序趟数</div><div class="line">　　　　　　<span class="keyword">for</span>(int j=0;j&lt;arr.length-1-i;j++)&#123;//内层循环控制每一趟排序多少次</div><div class="line">　　　　　　　　<span class="keyword">if</span>(arr[j]&gt;arr[j+1])&#123;</div><div class="line">　　　　　　　　　　int temp=arr[j];</div><div class="line">　　　　　　　　　　arr[j]=arr[j+1];</div><div class="line">　　　　　　　　　　arr[j+1]=temp;</div><div class="line">　　　　　　　　&#125;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　&#125; </div><div class="line">　　　　System.out.println();</div><div class="line">　　　　System.out.println(<span class="string">"排序后的数组为："</span>);</div><div class="line"> 　　　　<span class="keyword">for</span>(int num:arr)&#123;</div><div class="line"> 　　　　　　System.out.print(num+<span class="string">" "</span>);</div><div class="line"> 　　　　&#125; </div><div class="line">　　&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="插入式排序"><a href="#插入式排序" class="headerlink" title="插入式排序"></a>插入式排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class InsertSort &#123;</div><div class="line">    public static void insertSort(int[] a) &#123;</div><div class="line">        int i, j, insertNote;// 要插入的数据</div><div class="line">        <span class="keyword">for</span> (i = 1; i &lt; a.length; i++) &#123;// 从数组的第二个元素开始循环将数组中的元素插入</div><div class="line">            insertNote = a[i];// 设置数组中的第2个元素为第一次循环要插入的数据</div><div class="line">            j = i - 1;</div><div class="line">            <span class="keyword">while</span> (j &gt;= 0 &amp;&amp; insertNote &lt; a[j]) &#123;</div><div class="line">                a[j + 1] = a[j];// 如果要插入的元素小于第j个元素,就将第j个元素向后移动</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            a[j + 1] = insertNote;// 直到要插入的元素不小于第j个元素,将insertNote插入到数组中</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        int a[] = &#123; 38,65,97,76,13,27,49 &#125;;</div><div class="line">        insertSort(a);</div><div class="line">        System.out.println(Arrays.toString(a));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class SelectionSort &#123;</div><div class="line"> </div><div class="line">    public static void selectionSort(int[] a) &#123;</div><div class="line">        int n = a.length;</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; n; i++) &#123;</div><div class="line">            int k = i;</div><div class="line">            // 找出最小值的小标</div><div class="line">            <span class="keyword">for</span> (int j = i + 1; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &lt; a[k]) &#123;</div><div class="line">                    k = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 将最小值放到排序序列末尾</div><div class="line">            <span class="keyword">if</span> (k &gt; i) &#123;</div><div class="line">                int tmp = a[i];</div><div class="line">                a[i] = a[k];</div><div class="line">                a[k] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        int[] b = &#123; 49, 38, 65, 97, 76, 13, 27, 50 &#125;;</div><div class="line">        selectionSort(b);</div><div class="line">        <span class="keyword">for</span> (int i : b)</div><div class="line">            System.out.print(i + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void <span class="function"><span class="title">listSort1</span></span>()&#123;</div><div class="line">    List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</div><div class="line">    list.add(1);</div><div class="line">    list.add(55);</div><div class="line">    list.add(9);</div><div class="line">    list.add(0);</div><div class="line">    list.add(2);</div><div class="line">    Collections.sort(list);//使用Collections的sort方法</div><div class="line">    <span class="keyword">for</span>(int a :list)&#123;</div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要是做一下Java的排序算法的整理,xXx&lt;/p&gt;
&lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;
      
    
    </summary>
    
      <category term="java SE" scheme="http://yoursite.com/categories/java-SE/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
